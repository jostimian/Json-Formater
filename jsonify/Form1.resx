<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>